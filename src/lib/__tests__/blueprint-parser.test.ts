import { parseAndNormalizeBlueprint } from '../blueprint-parser';

describe('parseAndNormalizeBlueprint', () => {

    describe('YAML Parsing Structures', () => {
        test('Structure 1: should correctly parse a standard multi-document YAML with a config header', () => {
            const yamlContent = `
id: yaml-test-v1
title: YAML Test
---
- id: p1
  prompt: What is YAML?
`;
            const result = parseAndNormalizeBlueprint(yamlContent, 'yaml');
            expect(result.id).toBe('yaml-test-v1');
            expect(result.title).toBe('YAML Test');
            expect(result.prompts).toHaveLength(1);
            expect(result.prompts[0].id).toBe('p1');
        });

        test('Structure 2: should correctly parse a stream of prompt documents', () => {
            const yamlContent = `
prompt: First prompt
---
prompt: Second prompt
---
id: p3
prompt: Third prompt
`;
            const result = parseAndNormalizeBlueprint(yamlContent, 'yaml');
            expect(result.id).toBeUndefined();
            expect(result.prompts).toHaveLength(3);
            expect(result.prompts[0].messages?.[0].content).toBe('First prompt');
            expect(result.prompts[2].id).toBe('p3');
        });

        test('Structure 3: should correctly parse a single document with a list of prompts', () => {
            const yamlContent = `
- id: p1
  prompt: "This is a prompts-only file."
- id: p2
  prompt: "This is the second prompt."
`;
            const result = parseAndNormalizeBlueprint(yamlContent, 'yaml');
            expect(result.id).toBeUndefined();
            expect(result.prompts).toHaveLength(2);
            expect(result.prompts[0].id).toBe('p1');
        });

        test('Structure 4: should correctly parse a single document with a prompts key', () => {
            const yamlContent = `
id: single-doc-with-prompts
prompts:
    - id: p1
      prompt: "First prompt"
`;
            const result = parseAndNormalizeBlueprint(yamlContent, 'yaml');
            expect(result.id).toBe('single-doc-with-prompts');
            expect(result.prompts).toHaveLength(1);
            expect(result.prompts[0].id).toBe('p1');
        });

        test('should handle a stream of documents where some are lists', () => {
            const yamlContent = `
prompt: First prompt
---
- prompt: Second prompt
  id: p2
- prompt: Third prompt
  id: p3
`;
            const result = parseAndNormalizeBlueprint(yamlContent, 'yaml');
            expect(result.prompts).toHaveLength(3);
            expect(result.prompts[0].messages?.[0].content).toBe('First prompt');
            expect(result.prompts[1].id).toBe('p2');
        });

        test('should handle config header without prompts (previously considered malformed)', () => {
            const yamlContent = `id: test-config\ntitle: Test Title`;
            const result = parseAndNormalizeBlueprint(yamlContent, 'yaml');
            expect(result.id).toBe('test-config');
            expect(result.title).toBe('Test Title');
            expect(result.prompts).toHaveLength(0);
        });

        test('should handle single prompt document without explicit structure', () => {
            const yamlContent = `prompt: "A single prompt"\nideal: "An ideal response"`;
            const result = parseAndNormalizeBlueprint(yamlContent, 'yaml');
            expect(result.prompts).toHaveLength(1);
            expect(result.prompts[0].messages?.[0].content).toBe('A single prompt');
            expect(result.prompts[0].idealResponse).toBe('An ideal response');
        });

        test('should handle auto-create style multi-document YAML', () => {
            const yamlContent = `title: "Test Auto-Create Blueprint"
description: "A test blueprint generated by auto-create"
---
- prompt: "What is the capital of France?"
  should:
    - "mentions Paris"
    - "provides accurate information"
- prompt: "Explain photosynthesis"
  should:
    - "mentions sunlight"
    - "mentions chlorophyll"
    - "explains the process clearly"`;
            const result = parseAndNormalizeBlueprint(yamlContent, 'yaml');
            expect(result.title).toBe('Test Auto-Create Blueprint');
            expect(result.description).toBe('A test blueprint generated by auto-create');
            expect(result.prompts).toHaveLength(2);
            expect(result.prompts[0].messages?.[0].content).toBe('What is the capital of France?');
            expect(result.prompts[0].points).toHaveLength(2);
            expect(result.prompts[1].messages?.[0].content).toBe('Explain photosynthesis');
            expect(result.prompts[1].points).toHaveLength(3);
        });
    });

    describe('Unified Normalization', () => {
        const complexYaml = `
configId: normalization-test
configTitle: Normalization Test
system: "Global system prompt"
prompts:
  - id: p1
    ideal: "Ideal response"
    system: "Prompt-specific system prompt"
    should:
      - "A simple conceptual point."
      - "Covers the 'prudent man' rule.": "Investment Advisers Act of 1940"
      - $contains: "fiduciary"
      - ['$ends_with', '.']
      - { text: "A weighted conceptual point.", weight: 3.0 }
      - { fn: "matches", arg: "[0-9]+", weight: 0.5 }
    should_not:
      - $contains: "guarantee"
    messages:
      - user: "Hello"
      - ai: "Hi there"
`;
        const complexJson = `{
            "id": "normalization-test",
            "title": "Normalization Test",
            "systemPrompt": "Global system prompt",
            "prompts": [
                {
                    "id": "p1",
                    "idealResponse": "Ideal response",
                    "system": "Prompt-specific system prompt",
                    "points": [
                        { "text": "A simple conceptual point.", "multiplier": 1.0 },
                        { "text": "Covers the 'prudent man' rule.", "citation": "Investment Advisers Act of 1940", "multiplier": 1.0 },
                        { "fn": "contains", "fnArgs": "fiduciary", "multiplier": 1.0 },
                        { "fn": "ends_with", "fnArgs": ".", "multiplier": 1.0 },
                        { "text": "A weighted conceptual point.", "multiplier": 3.0 },
                        { "fn": "matches", "fnArgs": "[0-9]+", "multiplier": 0.5 }
                    ],
                    "should_not": [
                       { "fn": "contains", "fnArgs": "guarantee", "multiplier": 1.0 }
                    ],
                    "messages": [
                      { "role": "user", "content": "Hello" },
                      { "role": "assistant", "content": "Hi there" }
                    ]
                }
            ]
        }`;

        const expectedPoints = [
            { text: "A simple conceptual point.", multiplier: 1.0 },
            { text: "Covers the 'prudent man' rule.", citation: "Investment Advisers Act of 1940", multiplier: 1.0 },
            { fn: "contains", fnArgs: "fiduciary", multiplier: 1.0 },
            { fn: "ends_with", fnArgs: ".", multiplier: 1.0 },
            { text: "A weighted conceptual point.", multiplier: 3.0 },
            { fn: "matches", fnArgs: "[0-9]+", multiplier: 0.5 }
        ];

        test.each([
            ['YAML', complexYaml],
            ['JSON', complexJson],
        ])('should correctly and identically normalize a complex %s blueprint', (_, content) => {
            const result = parseAndNormalizeBlueprint(content, content === complexYaml ? 'yaml' : 'json');

            expect(result.id).toBe('normalization-test');
            expect(result.title).toBe('Normalization Test');
            expect(result.system).toBe('Global system prompt');
            expect(result.prompts).toHaveLength(1);

            const prompt = result.prompts[0];
            expect(prompt.id).toBe('p1');
            expect(prompt.promptText).toBeUndefined();
            expect(prompt.idealResponse).toBe("Ideal response");
            expect(prompt.system).toBe("Prompt-specific system prompt");
            expect(prompt.points).toEqual(expectedPoints);
            expect(prompt.should_not).toEqual([{ fn: 'contains', fnArgs: 'guarantee', multiplier: 1.0 }]);
            expect(prompt.messages).toEqual([
                { role: 'user', content: 'Hello' },
                { role: 'assistant', content: 'Hi there' },
            ]);
        });

        test('should correctly parse prompt-level citation in YAML', () => {
            const yamlWithCitation = `
- id: test-prompt
  prompt: "What is Beejamrut?"
  ideal: "Beejamrut is an organic bio-fertilizer."
  citation: "https://www.youtube.com/watch?v=example"
  should:
    - "Should mention organic bio-fertilizer"
`;
            const result = parseAndNormalizeBlueprint(yamlWithCitation, 'yaml');
            
            expect(result.prompts).toHaveLength(1);
            const prompt = result.prompts[0];
            expect(prompt.id).toBe('test-prompt');
            expect(prompt.citation).toBe('https://www.youtube.com/watch?v=example');
            expect(prompt.idealResponse).toBe('Beejamrut is an organic bio-fertilizer.');
            expect(prompt.points).toHaveLength(1);
        });

        test('should correctly parse prompt-level citation in JSON', () => {
            const jsonWithCitation = `{
                "prompts": [
                    {
                        "id": "test-prompt",
                        "promptText": "What is Beejamrut?",
                        "idealResponse": "Beejamrut is an organic bio-fertilizer.",
                        "citation": "https://www.youtube.com/watch?v=example",
                        "points": [
                            { "text": "Should mention organic bio-fertilizer", "multiplier": 1.0 }
                        ]
                    }
                ]
            }`;
            const result = parseAndNormalizeBlueprint(jsonWithCitation, 'json');
            
            expect(result.prompts).toHaveLength(1);
            const prompt = result.prompts[0];
            expect(prompt.id).toBe('test-prompt');
            expect(prompt.citation).toBe('https://www.youtube.com/watch?v=example');
            expect(prompt.idealResponse).toBe('Beejamrut is an organic bio-fertilizer.');
            expect(prompt.points).toHaveLength(1);
        });
        
        test('should generate a stable hash-based ID for a prompt without an ID', () => {
            const yamlContent = `
- prompt: "This prompt needs an ID."
  ideal: "An ideal response."
`;
            const result = parseAndNormalizeBlueprint(yamlContent, 'yaml');
            const prompt = result.prompts[0];
            expect(prompt.id).toBe('hash-a123cf388be1');
        });
    });

    describe('Error Handling', () => {
        test.each([
            ['Invalid JSON syntax', `{"id": "json-fail", "prompts": [}`, 'json', 'Failed to parse JSON blueprint'],
            ['Empty YAML file', ``, 'yaml', 'YAML blueprint is empty or contains only null documents.'],
            ['Point with text and fn', `- prompt: p\n  should:\n    - point: "t"\n      fn: "f"`, 'yaml', "Point cannot have both 'text' and 'fn' defined"],
            ['Invalid tuple function', `- prompt: p\n  should:\n    - ['contains', 'missing dollar']`, 'yaml', "first element must be a function name starting with '$'"],
            ['Malformed shorthand message', `- prompt: p\n  messages:\n    - { user: "u", assistant: "a" }`, 'yaml', 'Each message in the shorthand format must have exactly one key'],
            ['Invalid multiplier value', `- prompt: p\n  should:\n    - point: "bad weight"\n      weight: 101`, 'yaml', 'Point multiplier must be a number between 0.1 and 10'],
            ['Invalid point format', `- prompt: p\n  should:\n    - 123`, 'yaml', 'Point must be a string, array, or object'],
            ['Point object with no valid content', `- prompt: p\n  should:\n    - weight: 2.0`, 'yaml', "Point must define 'text', a function ('fn' or '$...'), or a 'Point: Citation' pair"]
        ])('should throw for %s', (_, content, type, expectedError) => {
            expect(() => parseAndNormalizeBlueprint(content, type as 'yaml' | 'json')).toThrow(expectedError);
        });
    });
}); 